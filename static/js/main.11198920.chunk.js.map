{"version":3,"sources":["pages/AboutPage.tsx","components/SceneComponent.tsx","utils/initWebXrPolyfill.ts","pages/MainPage.tsx","App.tsx","config.ts","index.tsx"],"names":["AboutPage","AboutPageDiv","styled","div","SceneComponent","props","reactCanvas","useRef","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","onSceneReady","rest","useEffect","current","engine","Engine","scene","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","resize","getEngine","window","addEventListener","dispose","removeEventListener","ref","initWebXrPolyfill","a","Promise","resolve","reject","navigator","xr","WebXRPolyfill","scriptElement","document","createElement","src","head","appendChild","onload","error","MainPage","MainPageDiv","camera","FreeCamera","Vector3","setTarget","Zero","canvas","getRenderingCanvas","attachControl","HemisphericLight","intensity","box","MeshBuilder","CreateBox","size","material","StandardMaterial","diffuseColor","Color3","FromHexString","position","y","ground","CreateGround","width","height","createDefaultXRExperienceAsync","floorMeshes","pointerSelection","laserPointerDefaultColor","SceneLoader","ImportMesh","newMeses","console","log","x","mesh","scaling","z","App","AppDiv","path","element","VERSION","version","config","ConfigChecker","from","process","BUILD_DETAILS_URL","get","url","value","BUILD_DATE","date","info","toLocaleString","href","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.11198920.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport function AboutPage() {\n    return (\n        <AboutPageDiv>\n            <h1>About</h1>\n        </AboutPageDiv>\n    );\n}\n\nconst AboutPageDiv = styled.div``;\n","import { Engine, EngineOptions, Scene, SceneOptions } from '@babylonjs/core';\nimport React, { useEffect, useRef } from 'react';\n\ninterface ISceneComponentProps\n    extends React.DetailedHTMLProps<\n        React.CanvasHTMLAttributes<HTMLCanvasElement>,\n        HTMLCanvasElement\n    > {\n    antialias?: boolean;\n    engineOptions?: EngineOptions;\n    adaptToDeviceRatio?: boolean;\n    sceneOptions?: SceneOptions;\n    onRender?: (scene: Scene) => void;\n    onSceneReady?: (scene: Scene) => void;\n}\n\nexport function SceneComponent(props: ISceneComponentProps) {\n    const reactCanvas = useRef(null);\n    const {\n        antialias,\n        engineOptions,\n        adaptToDeviceRatio,\n        sceneOptions,\n        onRender,\n        onSceneReady,\n        ...rest\n    } = props;\n\n    useEffect(() => {\n        if (reactCanvas.current) {\n            const engine = new Engine(\n                reactCanvas.current,\n                antialias,\n                engineOptions,\n                adaptToDeviceRatio,\n            );\n            const scene = new Scene(engine, sceneOptions);\n            if (scene.isReady()) {\n                if (onSceneReady) {\n                    onSceneReady(scene);\n                }\n            } else {\n                scene.onReadyObservable.addOnce(() => {\n                    if (onSceneReady) {\n                        onSceneReady(scene);\n                    }\n                });\n            }\n\n            engine.runRenderLoop(() => {\n                if (typeof onRender === 'function') {\n                    onRender(scene);\n                }\n                scene.render();\n            });\n\n            const resize = () => {\n                scene.getEngine().resize();\n            };\n\n            if (window) {\n                window.addEventListener('resize', resize);\n            }\n\n            return () => {\n                scene.getEngine().dispose();\n\n                if (window) {\n                    window.removeEventListener('resize', resize);\n                }\n            };\n        }\n    }, [\n        reactCanvas,\n        adaptToDeviceRatio,\n        antialias,\n        engineOptions,\n        onRender,\n        onSceneReady,\n        sceneOptions,\n    ]);\n\n    return <canvas ref={reactCanvas} {...rest} />;\n}\n","export async function initWebXrPolyfill() {\n    await new Promise<void>((resolve, reject) => {\n        try {\n            if ((navigator as any).xr) {\n                return resolve();\n            }\n            if ((window as any).WebXRPolyfill) {\n                // tslint:disable-next-line:no-unused-expression\n                new (window as any).WebXRPolyfill();\n                return resolve();\n            } else {\n                const url =\n                    'https://cdn.jsdelivr.net/npm/webxr-polyfill@latest/build/webxr-polyfill.js';\n                const scriptElement = document.createElement('script');\n                scriptElement.src = url;\n                document.head.appendChild(scriptElement);\n                scriptElement.onload = () => {\n                    // tslint:disable-next-line:no-unused-expression\n                    new (window as any).WebXRPolyfill();\n                    resolve();\n                };\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","import {\n    Color3,\n    FreeCamera,\n    HemisphericLight,\n    MeshBuilder,\n    SceneLoader,\n    StandardMaterial,\n    Vector3,\n} from '@babylonjs/core';\nimport '@babylonjs/loaders/glTF';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { SceneComponent } from '../components/SceneComponent';\nimport { initWebXrPolyfill } from '../utils/initWebXrPolyfill';\n\nexport function MainPage() {\n    return (\n        <MainPageDiv>\n            <h1>Model splitter</h1>\n\n            <SceneComponent\n                onSceneReady={async (scene) => {\n                    // TODO: !!! Breakup into smaller functions\n\n                    await initWebXrPolyfill();\n\n                    // This creates and positions a free camera (non-mesh)\n                    const camera = new FreeCamera(\n                        'camera1',\n                        new Vector3(0, 5, -10),\n                        scene,\n                    );\n\n                    // This targets the camera to scene origin\n                    camera.setTarget(Vector3.Zero());\n\n                    const canvas = scene.getEngine().getRenderingCanvas();\n\n                    // This attaches the camera to the canvas\n                    camera.attachControl(canvas, true);\n\n                    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n                    const light = new HemisphericLight(\n                        'light',\n                        new Vector3(0, 1, 0),\n                        scene,\n                    );\n\n                    // Default intensity is 1. Let's dim the light a small amount\n                    light.intensity = 0.7;\n\n                    // Our built-in 'box' shape.\n                    const box = MeshBuilder.CreateBox(\n                        'box',\n                        { size: 2 },\n                        scene,\n                    );\n\n                    const material = new StandardMaterial('material', scene);\n                    material.diffuseColor = Color3.FromHexString('#0055ff');\n\n                    box.material = material;\n\n                    // Move the box upward 1/2 its height\n                    box.position.y = 1;\n\n                    // Our built-in 'ground' shape.\n                    const ground = MeshBuilder.CreateGround(\n                        'ground',\n                        {\n                            // TODO: How to make ground infinite?\n                            width: 1000,\n                            height: 1000,\n                        },\n                        scene,\n                    );\n\n                    const xr = await scene.createDefaultXRExperienceAsync({\n                        floorMeshes: [ground],\n                    });\n\n                    xr.pointerSelection.laserPointerDefaultColor =\n                        Color3.FromHexString('#ff0000');\n\n                    // TODO: Make as promise with loader support\n                    SceneLoader.ImportMesh(\n                        '',\n                        process.env.PUBLIC_URL + 'models/',\n                        // TODO: !!! 'Tumor.obj',\n                        'Fox.glb',\n                        scene,\n                        (newMeses) => {\n                            console.log(newMeses);\n\n                            let x = 2;\n                            for (const mesh of newMeses) {\n                                mesh.scaling.x = 0.02;\n                                mesh.scaling.y = 0.02;\n                                mesh.scaling.z = 0.02;\n                                mesh.position.y = 1;\n                                mesh.position.x = x++;\n                            }\n\n                            // Finished\n                        },\n                    );\n                }}\n            />\n        </MainPageDiv>\n    );\n}\n\nconst MainPageDiv = styled.div`\n    canvas {\n        z-index: 1;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100vw;\n        height: 100vh;\n    }\n\n    /*.controlls{\n        z-index: 1;\n        position: fixed;\n        right: 0;\n        bottom: 0;\n        width: 100vw;\n        height: 100vh;\n    }*/\n`;\n","import React from 'react';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { AboutPage } from './pages/AboutPage';\nimport { MainPage } from './pages/MainPage';\n\nexport function App() {\n    return (\n        <AppDiv>\n            <HashRouter>\n                <Routes>\n                    <Route path=\"/\" element={<MainPage />} />\n                    <Route path=\"/about\" element={<AboutPage />} />\n                </Routes>\n            </HashRouter>\n        </AppDiv>\n    );\n}\n\nconst AppDiv = styled.div`\n    border: 1px dashed red;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n","import { ConfigChecker } from 'configchecker';\n///* tslint:disable:no-var-requires */\n//const packageJson = require('../package.json');\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n\nconst config = ConfigChecker.from(process.env);\n\nexport const BUILD_DETAILS_URL = config\n    .get(\n        'REACT_APP_BUILD_DETAILS_URL' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .url().value;\n\nexport const BUILD_DATE = config\n    .get(\n        'REACT_APP_BUILD_DATE' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .date().value;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { BUILD_DATE, BUILD_DETAILS_URL, VERSION } from './config';\n\nconsole.info(\n    `%c✂️ Model splitter version ${VERSION}` +\n        (!BUILD_DATE ? `` : `\\nBuild at ${BUILD_DATE.toLocaleString()}`) +\n        (!BUILD_DETAILS_URL\n            ? ``\n            : `\\nView build details ${BUILD_DETAILS_URL.href}`),\n    `background: #009EDD; color: white; font-size: 1.1em; font-weight: bold; padding: 5px; border-radius: 3px;`,\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}